plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'kotlinx-serialization'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "io.libzy"
        minSdk 26
        targetSdk 32
        versionCode 8
        versionName "0.3.2"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
            }
        }
    }

    def keystoreProperties = new Properties()
    file('../signing/keys.properties').withInputStream { keystoreProperties.load(it) }

    signingConfigs {
        release {
            storeFile file('../signing/libzy-android-keystore.jks')
            storePassword keystoreProperties.getProperty('libzyStorePassword')
            keyPassword keystoreProperties.getProperty('libzyKeyPassword')
            keyAlias keystoreProperties.getProperty('libzyKeyAlias')
        }
    }

    def AMPLITUDE_API_KEY = "AMPLITUDE_API_KEY"

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField "String", AMPLITUDE_API_KEY, keystoreProperties.getProperty('amplitudeApiKeyProd')
        }

        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
            buildConfigField "String", AMPLITUDE_API_KEY, keystoreProperties.getProperty('amplitudeApiKeyDev')
        }
    }

    flavorDimensions "env"
    productFlavors {
        prod {
            dimension "env"
            resValue "string", "app_name", "Libzy"
        }

        dev {
            dimension "env"
            resValue "string", "app_name", "Libzy Dev"
            applicationIdSuffix ".dev"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs = ["-Xopt-in=kotlin.time.ExperimentalTime", "-opt-in=kotlin.RequiresOptIn"]
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion compose_compile_version
    }

    packagingOptions {
        resources {
            // Required for conflicts with adamint's Spotify API wrapper
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.md', 'META-INF/LICENSE.txt', 'META-INF/license.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.md', 'META-INF/NOTICE.txt', 'META-INF/notice.txt', 'META-INF/ASL2.0', 'META-INF/*.kotlin_module']
        }
    }

    namespace 'io.libzy'

}

repositories {
    mavenCentral()
    google()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    def coroutinesVersion = "1.5.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.2.2"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // Android
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.7.0-alpha02'

    // Lifecycle
    def lifecycle_version = "2.5.0-rc01"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "android.arch.lifecycle:extensions:1.1.1"

    // Navigation
    implementation "androidx.navigation:navigation-compose:2.5.0-rc01"
    androidTestImplementation "androidx.navigation:navigation-testing:2.4.2"

    // WorkManager
    def work_version = "2.7.1"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    androidTestImplementation "androidx.work:work-testing:$work_version"

    // Compose
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    implementation "androidx.compose.foundation:foundation:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.material:material-icons-core:$compose_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    implementation "androidx.activity:activity-compose:1.4.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:2.5.0-rc01"
    implementation "androidx.constraintlayout:constraintlayout-compose:1.1.0-alpha02"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"

    // Accompanist
    def accompanist_version = "0.24.9-beta"
    implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanist_version"
    implementation "com.google.accompanist:accompanist-insets-ui:$accompanist_version"
    implementation "com.google.accompanist:accompanist-flowlayout:$accompanist_version"

    // Glide
    def glide_version = "4.12.0"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // Spotify
    implementation 'com.spotify.android:auth:1.2.3'
    implementation project(':spotify-app-remote')
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'com.adamratzman:spotify-api-kotlin-core:3.8.1'

    // Database
    def room_version = "2.5.0-alpha02"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"

    // Dependency Injection
    def dagger_version = "2.37"
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    // Logging
    implementation 'com.jakewharton.timber:timber:4.7.1'
    
    // Firebase
    implementation platform('com.google.firebase:firebase-bom:28.3.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-perf-ktx'

    // Amplitude
    implementation 'com.amplitude:android-sdk:2.23.2'
    
    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support:support-annotations:28.0.0'

    // Debug
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'

}
